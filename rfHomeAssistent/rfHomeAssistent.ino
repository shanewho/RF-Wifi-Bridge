#include <WiFi.h>

const char* ssid = "xxxxxxx";
const char* password = "xxxxxxx";
 
#define ledPin 2
#define rfOutPin 17
WiFiServer server(9444);

typedef struct { 
  String id;
  unsigned int data[135];
} code;

const code codeMap[] {
  {"kitchen-up",       {}},
  {"kitchen-down",     {}},
  {"living-room-up",   {}},
  {"living-room-down", { 580,5220,5220,580,580,290,290,580,580,290,240,580,290,580,290,580,580,290,580,290,580,290,580,290,290,580,290,580,290,580,580,290,580,290,580,290,290,580,290,580,580,290,580,290,580,290,580,290,580,290,580,290,580,290,290,580,290,580,580,290,290,580,290,580,580,290,580,290,290,580,244,580,290,580,290,580,290,580,290,580,290,580,580,290,290,580,290,580,290,580,290,580,290,580,290,580,290,580,290,580,290,580,580,290,290,580,290,580,290,580,290,580,580,290,580,290,580,290,580,290,290,580,580,290,580,290,580,290,290,580,580,290,0 }},
  {"dining-room-up",   {}},
  {"dining-room-down", {}},
  {"all-up",           {}},
  {"all-down",         {}},
  {"all-stop",         {}},
  {"black-switch-on",  { 296,932,292,4604,300,928,296,928,292,932,908,316,908,316,904,320,292,932,900,324,292,936,900,324,288,936,900,324,900,324,900,324,900,324,896,328,896,328,284,940,284,944,896,328,892,328,896,328,280,944,284,944,284,944,284,940,284,940,892,332,896,328,284,944,284,940,284,940,280,0}},
  {"black-switch-off", { 224,4672,240,992,236,980,240,992,848,376,848,376,844,380,232,996,844,380,232,992,848,380,236,988,844,384,844,384,844,384,840,384,840,380,840,392,224,1000,832,388,228,1004,224,1000,228,996,840,388,840,388,228,996,228,996,232,996,840,380,848,384,840,384,836,384,840,392,220,0}},
  {"white-switch-toggle", { 148,4924,136,488,464,160,156,488,152,488,468,156,480,164,476,164,156,496,136,504,456,164,472,168,156,500,132,508,452,168,468,172,472,172,144,512,124,512,128,508,124,516,440,172,148,520,440,172,144,516,120,0}},
};
 
void setup() {
  Serial.begin(115200);
  delay(10);
 
  pinMode(ledPin, OUTPUT);
  pinMode(rfOutPin, OUTPUT);
  digitalWrite(rfOutPin, LOW);

  digitalWrite(ledPin, LOW);
 
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.config(INADDR_NONE, INADDR_NONE, INADDR_NONE);
  WiFi.setHostname("RFduino");
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  flashLight(5,100);
 
  // Start the server
  server.begin();
  Serial.println("Server started");
 
  // Print the IP address
  Serial.print("Use this URL to connect: ");
  Serial.print("http://");
  Serial.print(WiFi.localIP());
  Serial.println("/");
}

// const int livingRoomDown[] = { 580,5220,5220,580,580,290,290,580,580,290,240,580,290,580,290,580,580,290,580,290,580,290,580,290,290,580,290,580,290,580,580,290,580,290,580,290,290,580,290,580,580,290,580,290,580,290,580,290,580,290,580,290,580,290,290,580,290,580,580,290,290,580,290,580,580,290,580,290,290,580,244,580,290,580,290,580,290,580,290,580,290,580,580,290,290,580,290,580,290,580,290,580,290,580,290,580,290,580,290,580,290,580,580,290,290,580,290,580,290,580,290,580,580,290,580,290,580,290,580,290,290,580,580,290,580,290,580,290,290,580,580,290,0 };


      
void loop() {
  WiFiClient client = server.available();
  if (client) {
    Serial.println("\n[Client connected]");
    while (client.connected()) {
      // read line by line what the client (web browser) is requesting
      if (client.available()) {
        String line = client.readStringUntil('\r');
        Serial.println(line);
        // wait for end of client's request, that is marked with an empty line
        if (line.indexOf("GET /switch") == 0) {
          processSwitch(line);
        }
        if (line.length() == 1 && line[0] == '\n') {
          client.println(prepareHtmlPage());
          break;
        }
      }
    }
    delay(1); // give the web browser time to receive the data

    // close the connection:
    client.stop();
    Serial.println("[Client disonnected]");
  }
}

void processSwitch(String line) {
  String cmd = getParam("cmd", line);
  flashLight(1,0);
  sendSignals(getCode(cmd));
}

String prepareHtmlPage()
{
  String htmlPage =
     String("HTTP/1.1 200 OK\r\n") +
            "Content-Type: text/html\r\n" +
            "Connection: close\r\n";  // the connection will be closed after completion of the response
      
  return htmlPage;
}

const unsigned int* getCode(String id) {
  for(int x = 0; x < (sizeof(codeMap) / sizeof(codeMap[0])); x++) {
    Serial.println(x);
    Serial.println(codeMap[x].id);
    Serial.println(id);
    if(codeMap[x].id == id) return codeMap[x].data;
  }
  return 0;
}

String getParam(String name, String line) {
  String param = "/" + name + "/";
  int start = line.indexOf(param);
  int end = line.indexOf("/", start + param.length());
  String value = line.substring(start + param.length(), end);
  Serial.println("Param: " + name + "=" + value);
  return value;
}

void sendSignals(const unsigned int* values) {
  if(values == 0) return;
  for (int attempts = 0; attempts < 20; attempts++) {
    int x = 0;
    while(values[x]) {
      digitalWrite(rfOutPin, x % 2 == 0 ? HIGH : LOW);
      delayMicroseconds(values[x]);
      x++;
    }
    digitalWrite(rfOutPin, LOW);
  }
}

void flashLight(int times, int del) {
  for(int x = 0; x < times; x++) {
    delay(del);
    digitalWrite(ledPin, HIGH);
    delay(del);
    digitalWrite(ledPin, LOW);
  }
}
